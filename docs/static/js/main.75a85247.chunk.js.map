{"version":3,"sources":["components/Form.js","components/Header.js","components/Weather.js","components/Error.js","App.js","reportWebVitals.js","index.js"],"names":["Form","search","setSearch","saveQuery","useState","error","setError","city","country","handleChange","e","target","name","value","onSubmit","preventDefault","trim","className","type","id","onChange","htmlFor","Header","title","href","Weather","apiResult","main","kelvin","parseFloat","temp","toFixed","temp_max","temp_min","Error","message","App","conditionalComponent","query","saveApiResult","useEffect","a","URL","fetch","request","json","response","cod","fetchAPI","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75a85247.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\n\nconst Form = ({search, setSearch, saveQuery}) => {\n\n  const [error, setError] = useState(false)\n\n  const {city, country} = search\n\n  const handleChange = e => {\n    setSearch({\n      ...search,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault()\n\n    if (city.trim() === '' || country.trim() === '') {\n      setError(true)\n      return\n    }\n\n    setError(false)\n    saveQuery(true)\n  }\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n    >\n\n      {error ? <p className=\"red darken-4 error\">All the fields are required</p> : null}\n\n      <div className=\"input-field col s12\">\n        <input\n          type=\"text\"\n          name=\"city\"\n          id=\"city\"\n          value={city}\n          onChange={handleChange}\n        />\n        <label htmlFor=\"city\">City:</label>\n      </div>\n\n      <div className=\"input-field col s12\">\n        <select\n          name=\"country\"\n          id=\"country\"\n          value={country}\n          onChange={handleChange}\n        >\n          <option value=\"\"> -- Select a country -- </option>\n          <option value=\"US\">Estados Unidos</option>\n          <option value=\"MX\">México</option>\n          <option value=\"AR\">Argentina</option>\n          <option value=\"CO\">Colombia</option>\n          <option value=\"CR\">Costa Rica</option>\n          <option value=\"ES\">España</option>\n          <option value=\"PE\">Perú</option>\n        </select>\n        <label htmlFor=\"country\">Country:</label>\n      </div>\n\n      <div className=\"input-field col s12\">\n        <button\n          type=\"submit\"\n          className=\"waves-effect waves-light btn-large btn-block yellow accent-4 col s12\"\n        >\n          Search weather\n        </button>\n      </div>\n\n    </form>\n  )\n}\n\nForm.propTypes = {\n  search: PropTypes.object.isRequired,\n  setSearch: PropTypes.func.isRequired,\n  saveQuery: PropTypes.func.isRequired\n}\n\nexport default Form\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Header = ({title}) => {\n  return (\n    <nav>\n      <div className=\"nav-wrapper light-blue darken-2\">\n        <a href=\"#!\" className=\"brand-logo\">{title}</a>\n      </div>\n    </nav>\n  )\n}\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired\n}\n\n\nexport default Header\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Weather = ({apiResult}) => {\n\n  const {name, main} = apiResult\n\n  if (!name || !main) return null\n\n  // Transform Kelvin into Celsius\n  const kelvin = 273.15\n\n  return (\n    <div className=\"card-panel white col s12\">\n      <div className=\"black-text\">\n        <h2>The weather in {name} is: </h2>\n        <p className=\"temperatura\">\n          {parseFloat(main.temp - kelvin, 10).toFixed(0)}\n          <span> &#x2103; </span>\n        </p>\n        <p>Max. temperature: &nbsp;\n          {parseFloat(main.temp_max - kelvin, 10).toFixed(0)}\n          <span> &#x2103; </span>\n        </p>\n        <p>Min. temperature: &nbsp;\n          {parseFloat(main.temp_min - kelvin, 10).toFixed(0)}\n          <span> &#x2103; </span>\n        </p>\n      </div>\n    </div>\n  )\n}\n\nWeather.propTypes = {\n  apiResult: PropTypes.object.isRequired\n}\n\nexport default Weather\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Error = ({message}) => {\n  return (\n    <p className=\"red darken-4 error\">{message}</p>\n  )\n}\n\nError.propTypes = {\n  message: PropTypes.string.isRequired\n}\n\nexport default Error\n","import React, {useEffect, useState} from 'react'\nimport Form from './components/Form'\nimport Header from './components/Header'\nimport Weather from './components/Weather'\nimport Error from './components/Error'\n\nfunction App () {\n\n  const [search, setSearch] = useState({\n    city: '',\n    country: ''\n  })\n\n  const [query, saveQuery] = useState(false)\n  const [apiResult, saveApiResult] = useState({})\n  const [error, setError] = useState(false)\n\n  const {city, country} = search\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      if (query) {\n        const apiKey = '01f8143c1269e0ef136cc629f37a2b08'\n        const URL = `https://api.openweathermap.org/data/2.5/weather?q=${ city },${ country }&appid=${ apiKey }`\n        const request = await fetch(URL)\n        const response = await request.json()\n        saveApiResult(response)\n        saveQuery(false)\n        // verify result status\n        if (response.cod === '404') {\n          setError(true)\n        } else {\n          setError(false)\n        }\n      }\n    }\n    fetchAPI()\n    // eslint-disable-next-line\n  }, [query])\n\n  let conditionalComponent\n  if (error) {\n    conditionalComponent = <Error message=\"No result found for this search\" />\n  } else {\n    conditionalComponent = <Weather apiResult={apiResult} />\n  }\n\n  return (\n    <>\n      <Header\n        title='Weather React App'\n      />\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col m6 s12\">\n              <Form\n                search={search}\n                setSearch={setSearch}\n                saveQuery={saveQuery}\n              />\n            </div>\n            <div className=\"col m6 s12\">\n              {conditionalComponent}\n            </div>\n          </div>\n        </div>\n      </div>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}